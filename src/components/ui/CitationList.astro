---
// Auto-generates citation list from CitedText components in the article
---

<div id="citation-list-container">
  <h3>References</h3>
  <ol id="citation-list" class="citation-list">
    <!-- Citations will be auto-populated by script -->
  </ol>
</div>

<style>
  .citation-list-container {
    margin-top: 2rem;
    padding-top: 2rem;
    border-top: 1px solid #e5e7eb;
  }
  
  .citation-list {
    list-style: decimal;
    padding-left: 1.5rem;
    margin-top: 1rem;
  }
    .citation-list li {
    margin-bottom: 0.75rem;
    line-height: 1.6;
    position: relative;
    padding-right: 30px;
  }
  
  .citation-list a {
    color: #4338CA;
    text-decoration: none;
    word-break: break-word;
    display: inline;
  }
  
  .citation-list a:hover {
    color: #3730A3;
  }
  
  @media (prefers-color-scheme: dark) {
    .citation-list-container {
      border-top-color: #374151;
    }
    
    .citation-list a {
      color: #8B5CF6;
    }
  }
</style>

<script is:inline>
  // Auto-populate citation list from CitedText elements
  document.addEventListener('DOMContentLoaded', function() {
    const citedElements = document.querySelectorAll('.cited-text');
    const citationList = document.getElementById('citation-list');
    const citationContainer = document.getElementById('citation-list-container');
    
    if (!citationList || citedElements.length === 0) {
      if (citationContainer) {
        citationContainer.style.display = 'none';
      }
      return;
    }
    
    // Collect unique citations
    const citations = new Map();
    
    citedElements.forEach(element => {
      const citationNumber = element.getAttribute('data-citation-number');
      const source = element.getAttribute('data-source');
      const url = element.getAttribute('data-url');
      const author = element.getAttribute('data-author');
      const year = element.getAttribute('data-year');
      const title = element.getAttribute('data-title');
      const publication = element.getAttribute('data-publication');
      
      if (citationNumber && !citations.has(citationNumber)) {
        citations.set(citationNumber, {
          number: parseInt(citationNumber),
          source,
          url,
          author,
          year,
          title,
          publication
        });
      }
    });
    
    // Sort by citation number and generate list
    const sortedCitations = Array.from(citations.values()).sort((a, b) => a.number - b.number);
    
    citationList.innerHTML = '';
      sortedCitations.forEach(citation => {
      const li = document.createElement('li');
      li.style.position = 'relative';
      
      // Build citation text
      let citationText = '';
      
      if (citation.author && citation.year) {
        citationText += `${citation.author} (${citation.year}). `;
      } else if (citation.author) {
        citationText += `${citation.author}. `;
      } else if (citation.source) {
        citationText += `${citation.source}. `;
      }
      
      if (citation.title) {
        citationText += `<em>${citation.title}</em>. `;
      }
      
      if (citation.publication) {
        citationText += `${citation.publication}.`;
      } else if (citation.source && citation.source !== citation.author) {
        citationText += `${citation.source}.`;
      }
      
      if (citation.url) {
        // Create clickable citation with external link icon
        const link = document.createElement('a');
        link.href = citation.url;
        link.target = '_blank';
        link.rel = 'noopener noreferrer';
        link.innerHTML = citationText.trim();
        link.style.textDecoration = 'none';
        link.style.display = 'inline';
        link.style.paddingRight = '24px';
        
        // Add external link icon
        const icon = document.createElement('span');
        icon.innerHTML = 'ðŸ”—';
        icon.style.position = 'absolute';
        icon.style.right = '0';
        icon.style.top = '50%';
        icon.style.transform = 'translateY(-50%)';
        icon.style.fontSize = '0.85em';
        icon.style.opacity = '0.7';
        icon.style.transition = 'opacity 0.2s';
        icon.setAttribute('aria-label', 'External link');
        
        li.appendChild(link);
        li.appendChild(icon);
        
        // Add hover effects
        link.addEventListener('mouseenter', () => {
          icon.style.opacity = '1';
        });
        link.addEventListener('mouseleave', () => {
          icon.style.opacity = '0.7';
        });
      } else {
        li.innerHTML = citationText.trim();
      }
      
      citationList.appendChild(li);
    });
    
    // Show container if we have citations
    if (sortedCitations.length > 0) {
      citationContainer.style.display = 'block';
    } else {
      citationContainer.style.display = 'none';
    }
  });
</script>
