---
import { highlightCode, addCopyButtons } from '../utils/codeHighlight';

interface Props {
  code: string;
  lang: string;
  filename?: string;
  theme?: 'github-light' | 'github-dark';
  showLineNumbers?: boolean;
}

const { 
  code, 
  lang, 
  filename = null, 
  theme = 'github-light', 
  showLineNumbers = false 
} = Astro.props;

// Get highlighted code HTML
const highlighted = await highlightCode(code, lang, theme);

// Add copy button and wrap in container
const htmlWithCopyButton = addCopyButtons(highlighted);

// Add line numbers if requested
let finalHtml = htmlWithCopyButton;
if (showLineNumbers) {
  // Process the HTML to add line numbers
  finalHtml = finalHtml.replace(
    /<pre(.*?)><code(.*?)>(.*?)<\/code><\/pre>/gs,
    (match, preAttrs, codeAttrs, codeContent) => {
      const lines = codeContent.split('\n');
      const lineNumbers = lines
        .map((_: string, i: number) => `<span class="line-number">${i + 1}</span>`)
        .join('\n');
      
      return `
        <div class="code-with-line-numbers">
          <div class="line-numbers-container">${lineNumbers}</div>
          <pre${preAttrs}><code${codeAttrs}>${codeContent}</code></pre>
        </div>
      `;
    }
  );
}
---

<div class="code-block">
  {filename && (
    <div class="code-filename" aria-label="Filename: {filename}">
      {filename}
    </div>
  )}
  <div class:list={["code-content", { "rounded-md": !filename, "rounded-b-md": filename }]}>
    <Fragment set:html={finalHtml} />
  </div>
</div>

<!--
  Styles for .code-block, .code-filename, .copy-button, etc. have been moved to global.css.
  Ensure all color, spacing, and font styles are handled via Tailwind classes or CSS variables.
  Accessibility:
    - .code-filename has aria-label for screen readers.
    - .code-content is focusable and has an aria-label.
    - The copy button (injected by addCopyButtons) should have aria-label and visible focus styles.
-->
